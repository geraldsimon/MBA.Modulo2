@page "/produto"
@using MBA.Modulo2.Spa.ExternalApi
@using MBA.Modulo2.Spa.ViewModels
@inject ProdutoHttpClient ProdutoApi

<PageTitle>Lista de Produtos</PageTitle>

@if (products == null)
{
    <p>Carregando produtos...</p>
}
else
{
    var imagePath = $"https://localhost:7009/images/";

    <div class="container-fluid py-4">
        <div class="card-compra">
            <div class="card-compra-header">
                <h4>PRODUTOS DISPONÍVEIS</h4>
            </div>
            <div class="card-compra-body">
                <div class="filters-section mb-4">
                    <div class="row g-3 mb-3">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="textoBusca" class="form-label">
                                    <i class="fas fa-search me-2 text-muted"></i>Buscar produtos
                                </label>
                                <input id="textoBusca" type="text" class="form-control" placeholder="Digite o nome ou descrição..." 
                                       @bind="textoBusca" @oninput="OnTextoBuscaChanged" />
                            </div>
                        </div>
                        
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="filtroCategoria" class="form-label">
                                    <i class="fas fa-tags me-2 text-muted"></i>Categoria
                                </label>
                                <select id="filtroCategoria" class="form-control" @bind="categoriaSelecionada" @bind:after="AplicarFiltros">
                                    <option value="">Todas as categorias</option>
                                    @foreach (var categoria in categorias)
                                    {
                                        <option value="@categoria">@categoria</option>
                                    }
                                </select>
                            </div>
                        </div>
                        
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="ordenacao" class="form-label">
                                    <i class="fas fa-sort me-2 text-muted"></i>Ordenar por
                                </label>
                                <select id="ordenacao" class="form-control" @bind="ordenacaoSelecionada" @bind:after="AplicarFiltros">
                                    <option value="nome">Nome (A-Z)</option>
                                    <option value="preco-menor">Menor preço</option>
                                    <option value="preco-maior">Maior preço</option>
                                    <option value="categoria">Categoria</option>
                                    <option value="estoque">Maior estoque</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="col-md-2">
                            <div class="form-group">
                                <label class="form-label">&nbsp;</label>
                                <div class="d-flex gap-2">
                                    <button class="btn-compra btn-compra-sm btn-compra-outline" @onclick="ToggleFiltrosAvancados" title="Filtros avançados">
                                        <i class="fas fa-sliders-h"></i>
                                    </button>
                                    <button class="btn-compra btn-compra-sm btn-compra-outline" @onclick="LimparFiltros" title="Limpar filtros">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    @if (mostrarFiltrosAvancados)
                    {
                        <div class="advanced-filters">
                            <div class="row g-3 mb-3">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label for="precoMinimo" class="form-label">
                                            <i class="fas fa-dollar-sign me-2 text-muted"></i>Preço mínimo
                                        </label>
                                        <input id="precoMinimo" type="number" class="form-control" step="0.01" min="0" 
                                               @bind="precoMinimo" @bind:after="AplicarFiltros" />
                                    </div>
                                </div>
                                
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label for="precoMaximo" class="form-label">
                                            <i class="fas fa-dollar-sign me-2 text-muted"></i>Preço máximo
                                        </label>
                                        <input id="precoMaximo" type="number" class="form-control" step="0.01" min="0" 
                                               @bind="precoMaximo" @bind:after="AplicarFiltros" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    
                    <div class="results-info mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-muted">
                                <i class="fas fa-cube me-2"></i>
                                <strong>@produtosFiltrados.Count</strong> produto(s) encontrado(s)
                                @if (products?.Count > 0 && produtosFiltrados.Count != products.Count)
                                {
                                    <span>de @products.Count no total</span>
                                }
                            </span>
                            
                            @if (!string.IsNullOrEmpty(textoBusca) || !string.IsNullOrEmpty(categoriaSelecionada) || precoMinimo > 0 || (precoMaximo > 0 && precoMaximo < (products?.Max(p => p.Preco) ?? 0)))
                            {
                                <span class="filter-indicator">
                                    <i class="fas fa-filter me-1"></i>Filtros ativos
                                </span>
                            }
                        </div>
                    </div>
                </div>

                @if (produtosFiltrados.Any())
                {
                    <div class="row">
                        @foreach (var product in produtosFiltrados)
                        {
                            <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                                <div class="card-compra h-100 product-card">
                                    <img src="@($"{imagePath}{product.Imagem}")" class="card-img-top" alt="@product.Nome" style="object-fit: cover; height: 200px; border-radius: var(--border-radius) var(--border-radius) 0 0;" />
                                    <div class="card-compra-body d-flex flex-column">
                                        <h5 class="card-title text-truncate">@product.Nome</h5>
                                        <p class="card-text flex-grow-1">@product.Descricao</p>
                                        <div class="product-info mb-3">
                                            <p class="mb-1"><strong>Preço:</strong> <span class="text-success">@product.Preco.ToString("C")</span></p>
                                            <p class="mb-1">
                                                <strong>Estoque:</strong>
                                                @if (product.Estoque > 0)
                                                {
                                                    <span class="badge-compra badge-compra-success">@product.Estoque</span>
                                                }
                                                else
                                                {
                                                    <span class="badge-compra badge-compra-danger">Esgotado</span>
                                                }
                                            </p>
                                            <p class="mb-0"><strong>Categoria:</strong> <span class="badge-compra badge-compra-primary">@product.Categoria</span></p>
                                        </div>
                                        <a class="btn-compra btn-compra-primary mt-auto" href="/produtoDetail/@product.Id">
                                            <i class="fas fa-eye me-2"></i>Ver Detalhes
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state text-center py-5">
                        <div class="empty-state-icon mb-3">
                            <i class="fas fa-search" style="font-size: 4rem; color: var(--text-muted);"></i>
                        </div>
                        <h5 class="empty-state-title mb-2">Nenhum produto encontrado</h5>
                        <p class="empty-state-text text-muted mb-3">
                            Não encontramos produtos que correspondam aos seus critérios de busca.
                        </p>
                        <button class="btn-compra btn-compra-primary" @onclick="LimparFiltros">
                            <i class="fas fa-refresh me-2"></i>Limpar filtros
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<ProdutoLoggedOutViewModel> products;
    private List<ProdutoLoggedOutViewModel> produtosFiltrados;
    private List<string> categorias = new();
    
    private string categoriaSelecionada = "";
    private string textoBusca = "";
    private decimal precoMinimo = 0;
    private decimal precoMaximo = 0;
    private string ordenacaoSelecionada = "nome";
    
    private bool mostrarFiltrosAvancados = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await ProdutoApi.GetProdutosAsync();

            categorias = products.Select(p => p.Categoria).Distinct().OrderBy(c => c).ToList();

            if (products.Any())
            {
                precoMaximo = products.Max(p => p.Preco);
            }

            AplicarFiltros();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar produtos: {ex.Message}");
            products = new List<ProdutoLoggedOutViewModel>();
            produtosFiltrados = new List<ProdutoLoggedOutViewModel>();
        }
    }

    private void AplicarFiltros()
    {
        var produtosFiltradosTemp = products.AsEnumerable();

        if (!string.IsNullOrEmpty(categoriaSelecionada))
        {
            produtosFiltradosTemp = produtosFiltradosTemp.Where(p => p.Categoria == categoriaSelecionada);
        }

        if (!string.IsNullOrEmpty(textoBusca))
        {
            var busca = textoBusca.ToLower().Trim();
            produtosFiltradosTemp = produtosFiltradosTemp.Where(p => 
                p.Nome.ToLower().Contains(busca) || 
                p.Descricao.ToLower().Contains(busca));
        }

        if (precoMinimo > 0)
        {
            produtosFiltradosTemp = produtosFiltradosTemp.Where(p => p.Preco >= precoMinimo);
        }
        
        if (precoMaximo > 0 && precoMaximo < products.Max(p => p.Preco))
        {
            produtosFiltradosTemp = produtosFiltradosTemp.Where(p => p.Preco <= precoMaximo);
        }

        produtosFiltradosTemp = ordenacaoSelecionada switch
        {
            "preco-menor" => produtosFiltradosTemp.OrderBy(p => p.Preco),
            "preco-maior" => produtosFiltradosTemp.OrderByDescending(p => p.Preco),
            "categoria" => produtosFiltradosTemp.OrderBy(p => p.Categoria).ThenBy(p => p.Nome),
            "estoque" => produtosFiltradosTemp.OrderByDescending(p => p.Estoque),
            _ => produtosFiltradosTemp.OrderBy(p => p.Nome)
        };

        produtosFiltrados = produtosFiltradosTemp.ToList();
        StateHasChanged();
    }

    private void LimparFiltros()
    {
        categoriaSelecionada = "";
        textoBusca = "";
        precoMinimo = 0;
        precoMaximo = products.Any() ? products.Max(p => p.Preco) : 0;
        ordenacaoSelecionada = "nome";
        AplicarFiltros();
    }

    private void ToggleFiltrosAvancados()
    {
        mostrarFiltrosAvancados = !mostrarFiltrosAvancados;
    }

    private void OnTextoBuscaChanged(ChangeEventArgs e)
    {
        textoBusca = e.Value?.ToString() ?? "";
        AplicarFiltros();
    }
}