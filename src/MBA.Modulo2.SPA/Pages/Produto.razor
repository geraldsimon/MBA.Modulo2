@page "/produto"
@using MBA.Modulo2.Spa.ExternalApi
@using MBA.Modulo2.Spa.ViewModels
@inject ProdutoHttpClient ProdutoApi

<PageTitle>Lista de Produtos</PageTitle>

@if (products == null)
{
    <p>Carregando produtos...</p>
}
else
{
    var imagePath = $"https://localhost:7009/images/";

    <div class="container-fluid py-4">
        <div class="card-compra">
            <div class="card-compra-header">
                <h4>PRODUTOS DISPONÍVEIS</h4>
            </div>
            <div class="card-compra-body">
                <div class="filters-section mb-4">
                    <div class="row g-3 mb-3">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="textoBusca" class="form-label">
                                    <i class="fas fa-search me-2 text-muted"></i>Buscar produtos
                                </label>
                                <input id="textoBusca" type="text" class="form-control" placeholder="Digite o nome ou descrição..." 
                                       @bind="textoBusca" @oninput="OnTextoBuscaChanged" />
                            </div>
                        </div>
                        
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="filtroCategoria" class="form-label">
                                    <i class="fas fa-tags me-2 text-muted"></i>Categoria
                                </label>
                                <select id="filtroCategoria" class="form-control" @bind="categoriaSelecionada" @bind:after="AplicarFiltros">
                                    <option value="">Todas as categorias</option>
                                    @foreach (var categoria in categorias)
                                    {
                                        <option value="@categoria">@categoria</option>
                                    }
                                </select>
                            </div>
                        </div>
                        
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="ordenacao" class="form-label">
                                    <i class="fas fa-sort me-2 text-muted"></i>Ordenar por
                                </label>
                                <select id="ordenacao" class="form-control" @bind="ordenacaoSelecionada" @bind:after="AplicarFiltros">
                                    <option value="nome">Nome (A-Z)</option>
                                    <option value="preco-menor">Menor preço</option>
                                    <option value="preco-maior">Maior preço</option>
                                    <option value="categoria">Categoria</option>
                                    <option value="estoque">Maior estoque</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="col-md-2">
                            <div class="form-group">
                                <label class="form-label">&nbsp;</label>
                                <div class="d-flex gap-2">
                                    <button class="btn-compra btn-compra-sm btn-compra-outline" @onclick="ToggleFiltrosAvancados" title="Filtros avançados">
                                        <i class="fas fa-sliders-h"></i>
                                    </button>
                                    <button class="btn-compra btn-compra-sm btn-compra-outline" @onclick="LimparFiltros" title="Limpar filtros">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    @if (mostrarFiltrosAvancados)
                    {
                        <div class="advanced-filters">
                            <div class="row g-3 mb-3">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label for="precoMinimo" class="form-label">
                                            <i class="fas fa-dollar-sign me-2 text-muted"></i>Preço mínimo
                                        </label>
                                        <input id="precoMinimo" type="number" class="form-control" step="0.01" min="0" 
                                               @bind="precoMinimo" @bind:after="AplicarFiltros" />
                                    </div>
                                </div>
                                
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label for="precoMaximo" class="form-label">
                                            <i class="fas fa-dollar-sign me-2 text-muted"></i>Preço máximo
                                        </label>
                                        <input id="precoMaximo" type="number" class="form-control" step="0.01" min="0" 
                                               @bind="precoMaximo" @bind:after="AplicarFiltros" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    
                    <!-- Informações e controles -->
                    <div class="results-controls mb-3">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <div class="results-info">
                                    <span class="text-muted">
                                        <i class="fas fa-cube me-2"></i>
                                        <strong>@produtosFiltrados.Count</strong> produto(s) encontrado(s)
                                        @if (products?.Count > 0 && produtosFiltrados.Count != products.Count)
                                        {
                                            <span>de @products.Count no total</span>
                                        }
                                        
                                        @if (totalPaginas > 1)
                                        {
                                            <span class="ms-2 text-muted">
                                                • Página @paginaAtual de @totalPaginas
                                            </span>
                                        }
                                    </span>
                                    
                                    @if (!string.IsNullOrEmpty(textoBusca) || !string.IsNullOrEmpty(categoriaSelecionada) || precoMinimo > 0 || (precoMaximo > 0 && precoMaximo < (products?.Max(p => p.Preco) ?? 0)))
                                    {
                                        <span class="filter-indicator ms-2">
                                            <i class="fas fa-filter me-1"></i>Filtros ativos
                                        </span>
                                    }
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="page-controls d-flex justify-content-end align-items-center">
                                    <label class="form-label me-2 mb-0">Itens por página:</label>
                                    <select class="form-control form-control-sm page-size-select" @bind="itensPorPagina" @bind:after="() => AlterarItensPorPagina(itensPorPagina)">
                                        <option value="3">3</option>
                                        <option value="6">6</option>
                                        <option value="9">9</option>
                                        <option value="12">12</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @if (produtosFiltrados.Any())
                {
                    <div class="row">
                        @foreach (var product in produtosPaginados)
                        {
                            <div class="col-md-6 col-lg-4 mb-4">
                                <div class="modern-product-card">
                                    <div class="card-image-container">
                                        <img src="@($"{imagePath}{product.Imagem}")" class="card-image" alt="@product.Nome" />
                                        <div class="image-overlay">
                                            <div class="quick-actions">
                                                <button class="quick-action-btn" title="Adicionar aos favoritos">
                                                    <i class="fas fa-heart"></i>
                                                </button>
                                                <button class="quick-action-btn" title="Visualização rápida">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="quick-action-btn" title="Compartilhar">
                                                    <i class="fas fa-share-alt"></i>
                                                </button>
                                            </div>
                                        </div>
                                        
                                        <div class="card-badges">
                                            @if (product.Estoque <= 0)
                                            {
                                                <span class="status-badge out-of-stock">Esgotado</span>
                                            }
                                            else if (product.Estoque <= 5)
                                            {
                                                <span class="status-badge low-stock">Últimas unidades</span>
                                            }
                                        </div>
                                    </div>
                                    
                                    <div class="card-content">
                                        <div class="category-tag">
                                            <i class="fas fa-tag"></i>
                                            @product.Categoria
                                        </div>
                                        
                                        <h5 class="product-name">@product.Nome</h5>
                                        
                                        <p class="product-description">@product.Descricao</p>
                                        
                                        <div class="card-footer-content">
                                            <div class="price-section">
                                                <span class="price-label">Preço</span>
                                                <span class="price-value">@product.Preco.ToString("C")</span>
                                            </div>
                                            
                                            <div class="stock-section">
                                                @if (product.Estoque > 0)
                                                {
                                                    <span class="stock-available">
                                                        <i class="fas fa-check-circle"></i>
                                                        @product.Estoque em estoque
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="stock-unavailable">
                                                        <i class="fas fa-times-circle"></i>
                                                        Indisponível
                                                    </span>
                                                }
                                            </div>
                                            
                                            <a class="modern-btn primary-btn" href="/produtoDetail/@product.Id">
                                                <span>Ver Detalhes</span>
                                                <i class="fas fa-arrow-right"></i>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    @if (totalPaginas > 1)
                    {
                        <div class="pagination-container mt-4">
                            <nav class="pagination-nav">
                                <div class="pagination-info">
                                    Mostrando @((paginaAtual - 1) * itensPorPagina + 1) até @(Math.Min(paginaAtual * itensPorPagina, produtosFiltrados.Count)) de @produtosFiltrados.Count produtos
                                </div>
                                
                                <ul class="pagination">
                                    <li class="page-item @(paginaAtual == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => IrParaPagina(1)" disabled="@(paginaAtual == 1)">
                                            <i class="fas fa-angle-double-left"></i>
                                        </button>
                                    </li>
                                    
                                    <li class="page-item @(paginaAtual == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => IrParaPagina(paginaAtual - 1)" disabled="@(paginaAtual == 1)">
                                            <i class="fas fa-angle-left"></i>
                                        </button>
                                    </li>
                                    
                                    @{
                                        var inicioRange = Math.Max(1, paginaAtual - 2);
                                        var fimRange = Math.Min(totalPaginas, paginaAtual + 2);
                                    }
                                    
                                    @if (inicioRange > 1)
                                    {
                                        <li class="page-item">
                                            <button class="page-link" @onclick="() => IrParaPagina(1)">1</button>
                                        </li>
                                        @if (inicioRange > 2)
                                        {
                                            <li class="page-item disabled">
                                                <span class="page-link">...</span>
                                            </li>
                                        }
                                    }
                                    
                                    @for (var i = inicioRange; i <= fimRange; i++)
                                    {
                                        var pagina = i;
                                        <li class="page-item @(paginaAtual == pagina ? "active" : "")">
                                            <button class="page-link" @onclick="() => IrParaPagina(pagina)">
                                                @pagina
                                            </button>
                                        </li>
                                    }
                                    
                                    @if (fimRange < totalPaginas)
                                    {
                                        @if (fimRange < totalPaginas - 1)
                                        {
                                            <li class="page-item disabled">
                                                <span class="page-link">...</span>
                                            </li>
                                        }
                                        <li class="page-item">
                                            <button class="page-link" @onclick="() => IrParaPagina(totalPaginas)">@totalPaginas</button>
                                        </li>
                                    }
                                    
                                    <li class="page-item @(paginaAtual == totalPaginas ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => IrParaPagina(paginaAtual + 1)" disabled="@(paginaAtual == totalPaginas)">
                                            <i class="fas fa-angle-right"></i>
                                        </button>
                                    </li>
                                    
                                    <li class="page-item @(paginaAtual == totalPaginas ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => IrParaPagina(totalPaginas)" disabled="@(paginaAtual == totalPaginas)">
                                            <i class="fas fa-angle-double-right"></i>
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                }
                else
                {
                    @if (!string.IsNullOrEmpty(textoBusca))
                    {
                       <div class="empty-state search-empty">
                            <div class="empty-state-animation">
                                <div class="search-icon-container">
                                    <i class="fas fa-search search-icon"></i>
                                    <div class="search-waves"></div>
                                </div>
                            </div>
                            <h5 class="empty-state-title">Nenhum resultado para "<strong>@textoBusca</strong>"</h5>
                            <p class="empty-state-text">
                                Não encontramos produtos que correspondam à sua pesquisa.<br>
                                Tente usar termos diferentes ou mais gerais.
                            </p>
                            <div class="empty-state-actions">
                                <button class="modern-btn secondary-btn me-3" @onclick="LimparBusca">
                                    <span>Limpar busca</span>
                                    <i class="fas fa-times"></i>
                                </button>
                                <button class="modern-btn primary-btn" @onclick="LimparFiltros">
                                    <span>Ver todos os produtos</span>
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                            <div class="empty-suggestions mt-4">
                                <p class="suggestions-title">Sugestões de busca:</p>
                                <div class="suggestion-tags">
                                    @foreach (var categoria in categorias.Take(4))
                                    {
                                        <button class="suggestion-tag" @onclick="() => SelecionarCategoria(categoria)">
                                            @categoria
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(categoriaSelecionada))
                    {
                        <div class="empty-state category-empty">
                            <div class="empty-state-animation">
                                <div class="category-icon-container">
                                    <i class="fas fa-tags category-icon"></i>
                                    <div class="category-particles"></div>
                                </div>
                            </div>
                            <h5 class="empty-state-title">Nenhum produto na categoria "<strong>@categoriaSelecionada</strong>"</h5>
                            <p class="empty-state-text">
                                Esta categoria não possui produtos disponíveis no momento.<br>
                                Explore outras categorias ou veja todos os produtos.
                            </p>
                            <div class="empty-state-actions">
                                <button class="modern-btn secondary-btn me-3" @onclick="RemoverFiltroCategoria">
                                    <span>Remover filtro</span>
                                    <i class="fas fa-filter"></i>
                                </button>
                                <button class="modern-btn primary-btn" @onclick="LimparFiltros">
                                    <span>Ver todas as categorias</span>
                                    <i class="fas fa-th-large"></i>
                                </button>
                            </div>
                        </div>
                    }
                    else if (precoMinimo > 0 || (precoMaximo > 0 && precoMaximo < (products?.Max(p => p.Preco) ?? 0)))
                    {
                        <div class="empty-state price-empty">
                            <div class="empty-state-animation">
                                <div class="price-icon-container">
                                    <i class="fas fa-dollar-sign price-icon"></i>
                                    <div class="price-chart"></div>
                                </div>
                            </div>
                            <h5 class="empty-state-title">Nenhum produto nesta faixa de preço</h5>
                            <p class="empty-state-text">
                                Não temos produtos disponíveis entre 
                                <strong>@(precoMinimo > 0 ? precoMinimo.ToString("C") : "R$ 0,00")</strong> e 
                                <strong>@(precoMaximo > 0 ? precoMaximo.ToString("C") : "∞")</strong>.
                                <br>Experimente ajustar os valores.
                            </p>
                            <div class="empty-state-actions">
                                <button class="modern-btn secondary-btn me-3" @onclick="AjustarPrecos">
                                    <span>Ajustar preços</span>
                                    <i class="fas fa-sliders-h"></i>
                                </button>
                                <button class="modern-btn primary-btn" @onclick="LimparFiltros">
                                    <span>Ver todos os preços</span>
                                    <i class="fas fa-tags"></i>
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="empty-state general-empty">
                            <div class="empty-state-animation">
                                <div class="general-icon-container">
                                    <i class="fas fa-box-open general-icon"></i>
                                    <div class="floating-items">
                                        <i class="fas fa-cube"></i>
                                        <i class="fas fa-gift"></i>
                                        <i class="fas fa-shopping-bag"></i>
                                    </div>
                                </div>
                            </div>
                            <h5 class="empty-state-title">Nenhum produto disponível</h5>
                            <p class="empty-state-text">
                                Não temos produtos para mostrar no momento.<br>
                                Tente recarregar a página ou volte mais tarde.
                            </p>
                            <div class="empty-state-actions">
                                <button class="modern-btn primary-btn" @onclick="RecarregarProdutos">
                                    <span>Recarregar produtos</span>
                                    <i class="fas fa-sync-alt"></i>
                                </button>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
}

@code {
    private List<ProdutoLoggedOutViewModel> products;
    private List<ProdutoLoggedOutViewModel> produtosFiltrados;
    private List<string> categorias = new();
    
    private string categoriaSelecionada = "";
    private string textoBusca = "";
    private decimal precoMinimo = 0;
    private decimal precoMaximo = 0;
    private string ordenacaoSelecionada = "nome";
    
    private bool mostrarFiltrosAvancados = false;
    
    private int paginaAtual = 1;
    private int itensPorPagina = 6;
    private int totalPaginas = 1;
    private List<ProdutoLoggedOutViewModel> produtosPaginados = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await ProdutoApi.GetProdutosAsync();

            categorias = products.Select(p => p.Categoria).Distinct().OrderBy(c => c).ToList();

            if (products.Any())
            {
                precoMaximo = products.Max(p => p.Preco);
            }

            AplicarFiltros();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar produtos: {ex.Message}");
            products = new List<ProdutoLoggedOutViewModel>();
            produtosFiltrados = new List<ProdutoLoggedOutViewModel>();
        }
    }

    private void AplicarFiltros()
    {
        var produtosFiltradosTemp = products.AsEnumerable();

        if (!string.IsNullOrEmpty(categoriaSelecionada))
        {
            produtosFiltradosTemp = produtosFiltradosTemp.Where(p => p.Categoria == categoriaSelecionada);
        }

        if (!string.IsNullOrEmpty(textoBusca))
        {
            var busca = textoBusca.ToLower().Trim();
            produtosFiltradosTemp = produtosFiltradosTemp.Where(p => 
                p.Nome.ToLower().Contains(busca) || 
                p.Descricao.ToLower().Contains(busca));
        }

        if (precoMinimo > 0)
        {
            produtosFiltradosTemp = produtosFiltradosTemp.Where(p => p.Preco >= precoMinimo);
        }
        
        if (precoMaximo > 0 && precoMaximo < products.Max(p => p.Preco))
        {
            produtosFiltradosTemp = produtosFiltradosTemp.Where(p => p.Preco <= precoMaximo);
        }

        produtosFiltradosTemp = ordenacaoSelecionada switch
        {
            "preco-menor" => produtosFiltradosTemp.OrderBy(p => p.Preco),
            "preco-maior" => produtosFiltradosTemp.OrderByDescending(p => p.Preco),
            "categoria" => produtosFiltradosTemp.OrderBy(p => p.Categoria).ThenBy(p => p.Nome),
            "estoque" => produtosFiltradosTemp.OrderByDescending(p => p.Estoque),
            _ => produtosFiltradosTemp.OrderBy(p => p.Nome)
        };

        produtosFiltrados = produtosFiltradosTemp.ToList();
        
        CalcularPaginacao();
        StateHasChanged();
    }

    private void LimparFiltros()
    {
        categoriaSelecionada = "";
        textoBusca = "";
        precoMinimo = 0;
        precoMaximo = products.Any() ? products.Max(p => p.Preco) : 0;
        ordenacaoSelecionada = "nome";
        AplicarFiltros();
    }

    private void ToggleFiltrosAvancados()
    {
        mostrarFiltrosAvancados = !mostrarFiltrosAvancados;
    }

    private void OnTextoBuscaChanged(ChangeEventArgs e)
    {
        textoBusca = e.Value?.ToString() ?? "";
        AplicarFiltros();
    }

    private void CalcularPaginacao()
    {
        if (!produtosFiltrados.Any())
        {
            totalPaginas = 1;
            paginaAtual = 1;
            produtosPaginados = new List<ProdutoLoggedOutViewModel>();
            return;
        }

        totalPaginas = (int)Math.Ceiling((double)produtosFiltrados.Count / itensPorPagina);
        
        if (paginaAtual > totalPaginas)
            paginaAtual = totalPaginas;
        if (paginaAtual < 1)
            paginaAtual = 1;

        var skip = (paginaAtual - 1) * itensPorPagina;
        produtosPaginados = produtosFiltrados.Skip(skip).Take(itensPorPagina).ToList();
    }

    private void IrParaPagina(int pagina)
    {
        if (pagina >= 1 && pagina <= totalPaginas)
        {
            paginaAtual = pagina;
            CalcularPaginacao();
            StateHasChanged();
        }
    }

    private void AlterarItensPorPagina(int novoTamanho)
    {
        itensPorPagina = novoTamanho;
        paginaAtual = 1;
        CalcularPaginacao();
        StateHasChanged();
    }

    private void LimparBusca()
    {
        textoBusca = "";
        AplicarFiltros();
    }

    private void SelecionarCategoria(string categoria)
    {
        textoBusca = "";
        categoriaSelecionada = categoria;
        AplicarFiltros();
    }

    private void RemoverFiltroCategoria()
    {
        categoriaSelecionada = "";
        AplicarFiltros();
    }

    private void AjustarPrecos()
    {
        precoMinimo = 0;
        precoMaximo = products?.Max(p => p.Preco) ?? 0;
        AplicarFiltros();
    }

    private async Task RecarregarProdutos()
    {
        await OnInitializedAsync();
    }
}