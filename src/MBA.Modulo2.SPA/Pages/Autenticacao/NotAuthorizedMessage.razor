@page "/NotAuthorizedMessage"
@using MBA.Modulo2.Spa.Components
@inject NavigationManager NavigationManager

<div class="auth-container">
    <div class="auth-card not-authorized-card">
        <div class="auth-header">
            <div class="error-icon">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
            <h4 class="auth-title">Acesso Negado</h4>
            <p class="auth-subtitle">Você não tem permissão para acessar este recurso</p>
        </div>

        <div class="error-content">
            <div class="error-help">
                <p class="help-text">
                    <i class="fas fa-lightbulb me-2"></i>
                    Caso acredite que isso seja um erro, entre em contato com o administrador.
                </p>
            </div>

            <div class="error-actions">
                <a href="/" class="auth-btn primary-action">
                    <i class="fas fa-home"></i>
                    <span>Voltar para Home</span>
                </a>
            </div>
        </div>
    </div>
</div>

<Toast Show="@mostrarToast" Message="@toastMessage" Type="@toastType" OnClose="@(EventCallback.Factory.Create(this, FecharToast))" />

@code {
    private bool carregado = false;
    private string ErrorMessage { get; set; } = "Você não tem permissão para acessar esta página.";
    
    private bool mostrarToast = false;
    private string toastMessage = "";
    private string toastType = "error";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!carregado && firstRender)
        {
            var uri = new Uri(NavigationManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("msg", out var msg))
            {
                ErrorMessage = msg;
            }

            // Exibe o erro via toast
            await MostrarToast(ErrorMessage, "error");
            carregado = true;
        }
    }
    
    private async Task MostrarToast(string mensagem, string tipo)
    {
        toastMessage = mensagem;
        toastType = tipo;
        mostrarToast = true;
        StateHasChanged();
        
        await Task.Delay(5000); // 5 segundos para erros
        mostrarToast = false;
        StateHasChanged();
    }
    
    private void FecharToast()
    {
        mostrarToast = false;
        StateHasChanged();
    }
}