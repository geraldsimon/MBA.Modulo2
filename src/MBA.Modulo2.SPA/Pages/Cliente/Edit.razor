@page "/cliente/editar/{id:guid}"
@using MBA.Modulo2.Spa.ExternalApi
@using MBA.Modulo2.Spa.ViewModels
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ClienteHttpClient ClienteApi
@inject NavigationManager Navigation

<PageTitle>Editar Cliente</PageTitle>

@if (mostrarAlert && !string.IsNullOrWhiteSpace(mensagemAlert))
{
    <div class="alert @alertCss alert-dismissible fade show" role="alert">
        @mensagemAlert
        <button type="button" class="btn-close" aria-label="Close" @onclick="FecharAlert"></button>
    </div>
}

<div class="card mt-0 mb-4">
    <div class="card-usuario-header">
        <h4 class="mb-0 fw-bold fs-5">
            <i class="fas fa-edit me-2 text-muted"></i>EDITAR NOME
        </h4>
    </div>

    <div class="card-body">
        <EditForm Model="cliente" OnValidSubmit="Salvar">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label fw-bold">
                            <i class="fas fa-id-card me-2 text-muted"></i>Nome
                        </label>
                        <InputText @bind-Value="cliente.Nome" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <button class="btn btn-success btn-sm me-2" type="submit">
                    <i class="fas fa-save me-1"></i>Salvar
                </button>

                <button class="btn btn-primary btn-sm" type="button" @onclick="Cancelar">
                    <i class="fas fa-arrow-left me-1"></i>Cancelar
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Guid id { get; set; }
    private ClienteViewModel cliente = new();

    private bool mostrarAlert = false;
    private string? mensagemAlert;
    private string alertCss = "alert-success";

    protected override async Task OnInitializedAsync()
    {
        cliente = await ClienteApi.ObterPorIdAsync(id);
    }

    private async Task Salvar()
    {
        try
        {
            await ClienteApi.AtualizarClienteAsync(cliente);

            alertCss = "alert-success";
            mensagemAlert = "Nome alterado com sucesso!";
            mostrarAlert = true;

            StateHasChanged();
            await Task.Delay(1500);

            Navigation.NavigateTo("/cliente");
        }
        catch
        {
            alertCss = "alert-danger";
            mensagemAlert = "Não foi possível salvar. Tente novamente.";
            mostrarAlert = true;
            StateHasChanged();
        }
    }

    private void FecharAlert()
    {
        mostrarAlert = false;
        mensagemAlert = null;
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/cliente");
    }
}
