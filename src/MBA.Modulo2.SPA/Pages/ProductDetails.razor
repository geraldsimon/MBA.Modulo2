@page "/produtoDetail/{Id:guid}"
@using MBA.Modulo2.Spa.ExternalApi
@using MBA.Modulo2.Spa.ViewModels
@using MBA.Modulo2.Spa.Components

@inject ProdutoHttpClient ProdutoApi
@inject AuthHttpClient AuthHttpApi
@inject FavoritoHttpClient FavoritoApi

@if (products == null)
{
    <p>Carregando produtos...</p>
}
else
{

    var imagePath = $"https://localhost:7009/images/";






    <CardComponent>
        <Titulo>
            PRODUTO
        </Titulo>
        <Corpo>
            <div class="text-center" style="margin:2% 20%">
                <img src="@($"{imagePath}{products.Imagem}")" class="card-img-top img-fluid" alt="@products.Nome" style="max-width: 100%; height: auto;">
            </div>
            <div class="card-body" style="margin:1% 15%">


                <div class="container">
                    <div class="row">

                        <div class="col-9"><h4 class="text-primary fw-bold">@products.Preco</h4></div>
                        <div class="col-3">
                            <div>
                                <button class="btn btn-outline-secondary me-2" title="Denunciar" @onclick="Denunciar">
                                    <img src="icons/icon_atencao.png" alt="Denunciar" style="width: 20px; height: 20px;" />
                                </button>

                                <Favoritar idProduto=@products.Id/>

                            </div>
                        </div>
                    </div>
                </div>

                <h5 class="card-title text-primary mt-3">@products.Nome</h5>


                <div class="row" style="margin-top:4%">
                    <div class="col-sm-8">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Descricao</h5>
                                <p class="card-text">
                                    @products.Descricao
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Estoque</h5>
                                <p class="card-text">@products.Estoque . </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">Categoria</h6>
                                <p class="card-text">@products.Categoria.Nome . </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Corpo>
    </CardComponent>


    <CardComponent>
        <Titulo>
            VENDEDOR
        </Titulo>
        <Corpo>
            <div class="card-body" style="margin:1% 15%">

                <div class="card mb-3 w-100">
                    <div class="row g-0">
                        <div class="col-md-4">
                            <img src="https://img.freepik.com/vetores-gratis/circulo-azul-com-usuario-branco_78370-4707.jpg?semt=ais_hybrid&w=740" class="img-fluid rounded-start" alt="...">
                        </div>
                        <div class="col-md-8">
                            <div class="card-body d-flex flex-column h-100">
                                <h5 class="card-title">INFORMAÇÕES GERAIS</h5>
                                <div style="margin:5%">
                                    <h3 class="card-text">NOME : @products.Vendedor.Nome </h3>

                                </div>

                                <!-- Este fica na parte inferior -->
                                <p class="card-text mt-auto">
                                    <small class="text-body-secondary">Último acesso: há 3 horas</small>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card mb-3 w-100">
                    <div class="card-body">
                        <h5 class="card-title mb-3">OUTROS PRODUTOS DO VENDEDOR</h5>
                        <div class="row">
                            @foreach (var produ in products.Vendedor.produtoReduzidos)
                            {
                                <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                                    <div class="card h-100">
                                        <img src="@($"{imagePath}{produ.Imagem}")" class="card-img-top" alt="@produ.Nome" style="object-fit: cover; height: 200px;" />
                                        <div class="card-body d-flex flex-column">
                                            <h6 class="card-title">@produ.Nome</h6>
                                            <p class="card-text mt-auto"><strong>Preço:</strong> @produ.Preco.ToString("C")</p>
                                            <a class="btn btn-primary mt-auto" href="/produtoDetail/@produ.Id">Ver Detalhes</a>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

            </div>
        </Corpo>
    </CardComponent>


    @if (mostrarModalLogin)
    {
        <ModalLogin OnClose="FecharModal" />
    }
   



}

@code {
    private ProdutoDetalhesViewModel products;
    private FavoritoDoClienteViewModel favoritando;

    [Parameter]
    public Guid Id { get; set; }

    private bool logado = false;
    private bool mostrarModalLogin = false;
    private bool mostrarToast;
    private string toastMessage;
    private string toastColorClass;


    protected override async Task OnParametersSetAsync()
    {
        try
        {
            logado = await AuthHttpApi.UsuarioEstaLogadoAsync();
            products = await ProdutoApi.GetProdutoDetalheAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar produtos: {ex.Message}");
            products = new ProdutoDetalhesViewModel();
        }
    }

    private async Task Denunciar()
    {
        var usuarioId = await AuthHttpApi.PegarIdUsuario();

        if (usuarioId == null)
        {
            mostrarModalLogin = true;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Usuário está logado com ID: {usuarioId}");
        }
    }

    private void AbrirModal()
    {
        mostrarModalLogin = true;
    }
    private void FecharModal()
    {
        mostrarModalLogin = false;
    }
}