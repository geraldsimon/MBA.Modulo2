@page "/produtoDetail/{Id:guid}"
@using MBA.Modulo2.Spa.ExternalApi
@using MBA.Modulo2.Spa.ViewModels
@using MBA.Modulo2.Spa.Components

@inject ProdutoHttpClient ProdutoApi
@inject AuthHttpClient AuthHttpApi
@inject FavoritoHttpClient FavoritoApi

@if (products == null)
{
    <p>Carregando produtos...</p>
}
else
{

    var imagePath = $"https://localhost:7009/images/";






    <div class="product-card-container">
        <CardComponent>
            <Titulo>
                PRODUTO
            </Titulo>
            <Corpo>
                <div class="product-image-container">
                    <img src="@($"{imagePath}{products.Imagem}")" class="product-image" alt="@products.Nome">
                </div>
                
                <div class="product-content">
                    <div class="product-header">
                        <h4 class="product-price">@products.Preco.ToString("C")</h4>
                        <div class="product-actions">
                            <button class="action-btn" title="Denunciar" @onclick="Denunciar">
                                <img src="icons/icon_atencao.png" alt="Denunciar" />
                            </button>
                            <button class="action-btn" title="Favoritar" @onclick="Favoritar">
                                <img src="icons/icon_favorito.png" alt="Favoritar" />
                            </button>
                        </div>
                    </div>

                    <h5 class="product-title">@products.Nome</h5>

                    <div class="product-info-grid">
                        <div class="info-card">
                            <h5 class="info-card-title">Descrição</h5>
                            <div class="info-card-content">
                                @products.Descricao
                            </div>
                        </div>
                        <div class="info-card">
                            <h5 class="info-card-title">Estoque</h5>
                            <div class="info-card-content">
                                @if (products.Estoque > 0)
                                {
                                    <span class="badge-compra badge-compra-success">@products.Estoque unidades</span>
                                }
                                else
                                {
                                    <span class="badge-compra badge-compra-danger">Esgotado</span>
                                }
                            </div>
                        </div>
                        <div class="info-card">
                            <h5 class="info-card-title">Categoria</h5>
                            <div class="info-card-content">
                                <span class="badge-compra badge-compra-primary">@products.Categoria.Nome</span>
                            </div>
                        </div>
                    </div>
                </div>
            </Corpo>
        </CardComponent>
    </div>


    <div class="vendor-card-container">
        <CardComponent>
            <Titulo>
                VENDEDOR
            </Titulo>
            <Corpo>
                <div class="vendor-content">
                    <div class="vendor-profile-card">
                        <div class="row g-0">
                            <div class="col-md-4">
                                <img src="https://img.freepik.com/vetores-gratis/circulo-azul-com-usuario-branco_78370-4707.jpg?semt=ais_hybrid&w=740" 
                                     class="vendor-avatar" alt="Foto do vendedor">
                            </div>
                            <div class="col-md-8">
                                <div class="vendor-info">
                                    <h5 class="vendor-info-title">INFORMAÇÕES GERAIS</h5>
                                    <div class="vendor-name">@products.Vendedor.Nome</div>
                                    <p class="vendor-last-seen">
                                        <i class="fas fa-clock me-1"></i>
                                        Último acesso: há 3 horas
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="other-products-card">
                        <h5 class="other-products-title">
                            <i class="fas fa-store me-2"></i>OUTROS PRODUTOS DO VENDEDOR
                        </h5>
                        <div class="product-grid">
                            @foreach (var produ in products.Vendedor.produtoReduzidos)
                            {
                                <div class="modern-mini-card">
                                    <div class="mini-card-image-container">
                                        <img src="@($"{imagePath}{produ.Imagem}")" class="mini-card-image" alt="@produ.Nome" />
                                        <div class="mini-card-overlay">
                                            <div class="mini-quick-actions">
                                                <button class="mini-action-btn" title="Ver detalhes">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="mini-action-btn" title="Favoritar">
                                                    <i class="fas fa-heart"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mini-card-content">
                                        <h6 class="mini-product-title">@produ.Nome</h6>
                                        <div class="mini-price-section">
                                            <span class="mini-price-value">@produ.Preco.ToString("C")</span>
                                        </div>
                                        <a class="modern-mini-btn" href="/produtoDetail/@produ.Id">
                                            <span>Ver Detalhes</span>
                                            <i class="fas fa-arrow-right"></i>
                                        </a>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </Corpo>
        </CardComponent>
    </div>


    @if (mostrarModalLogin)
    {
        <ModalLogin OnClose="FecharModal" />
    }
    <Toast Show="mostrarToast" ColorClass="@toastColorClass" Message="@toastMessage" OnClose="FecharToast" />



}

@code {
    private ProdutoDetalhesViewModel products;
    private FavoritoDoClienteViewModel favoritando;

    [Parameter]
    public Guid Id { get; set; }

    private bool logado = false;
    private bool mostrarModalLogin = false;
    private bool mostrarToast;
    private string toastMessage;
    private string toastColorClass;



    protected override async Task OnParametersSetAsync()
    {
        try
        {
            logado = await AuthHttpApi.UsuarioEstaLogadoAsync();
            products = await ProdutoApi.GetProdutoDetalheAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar produtos: {ex.Message}");
            products = new ProdutoDetalhesViewModel();
        }
    }

    private async Task Favoritar()
    {
        if (logado.Equals(false))
        {
            mostrarModalLogin = true;
            StateHasChanged();
        }
        else
        {
            byte retorno = await FavoritoApi.RegistrarFavorito(Id);
            switch (retorno)
            {
                case 1:
                    await MostrarToast("Produto adicionado aos favoritos!", "text-bg-success");
                    break;
                case 2:
                    await MostrarToast("Produto Deletado dos favoritos", "text-bg-warning");
                    break;
                case 3:
                    await MostrarToast("Ocorreu algum erro!", "text-bg-danger");
                    break;
            }
        }
    }

    

    private async Task Denunciar()
    {
        var usuarioId = await AuthHttpApi.PegarIdUsuario();

        if (usuarioId == null)
        {
            mostrarModalLogin = true;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Usuário está logado com ID: {usuarioId}");
        }
    }


    
    private void AbrirModal()
    {
        mostrarModalLogin = true;
    }
    private void FecharModal()
    {
        mostrarModalLogin = false;
    }
    






    private async Task MostrarToast(string mensagem, string corClasse)
    {
        toastMessage = mensagem;
        toastColorClass = corClasse;
        mostrarToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        mostrarToast = false;
        StateHasChanged();
    }

    private Task FecharToast()
    {
        mostrarToast = false;
        return Task.CompletedTask;
    }
}